"use client"

import Image from "next/image"
import { formatDistanceToNow } from "date-fns"
import { ptBR } from "date-fns/locale"
import ReactMarkdown from "react-markdown"
import remarkGfm from "remark-gfm"
import type { Message } from "@/lib/types"
import { useState } from "react"
// import { toast } from "@/components/ui/use-toast"
import {
  BookmarkPlus,
  BookmarkCheck,
  Copy,
  Check,
  Share2,
  Download,
  ThumbsUp,
  ThumbsDown,
  MoreHorizontal,
} from "lucide-react"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { Button } from "@/components/ui/button"
import { useIdeas, type NewIdea } from "@/hooks/useIdeas"

interface MessageBubbleProps {
  message: Message
  userId: string
}

export default function MessageBubble({ message, userId }: MessageBubbleProps) {
  const isUser = message.sender === "user"
  const formattedTime = formatDistanceToNow(new Date(message.timestamp), {
    addSuffix: true,
    locale: ptBR,
  })

  const { createIdea } = useIdeas(userId)

  const [isCopied, setIsCopied] = useState(false)
  const [isSaving, setIsSaving] = useState(false)
  const [isSuccessfullySaved, setIsSuccessfullySaved] = useState(false)
  const [feedback, setFeedback] = useState<"none" | "like" | "dislike">("none")

  // Function to copy message text
  const handleCopy = () => {
    navigator.clipboard.writeText(message.content || "")
    setIsCopied(true)
    // toast({
    //   title: "Copied!",
    //   description: "Text copied to clipboard",
    // })
    setTimeout(() => setIsCopied(false), 2000)
  }

  // Function to save message as an idea
  const handleSaveToIdeas = async () => {
    if (isSaving || isSuccessfullySaved) return

    setIsSaving(true)

    const newIdeaData: NewIdea = {
      title: message.content?.substring(0, 70) + (message.content && message.content.length > 70 ? "..." : ""),
      idea_text: message.content || "",
      tags: ["chat", "chatbot-suggestion"],
      status: "draft",
    }

    const result = await createIdea(newIdeaData)

    if (result.success) {
      setIsSuccessfullySaved(true)
      // toast({
      //   title: "Salvo no Ideas Bank!",
      //   description: "Sua nova ideia foi registrada com sucesso.",
      // })
    } else {
      // toast({
      //   title: "Erro ao Salvar",
      //   description: result.error?.message || "Não foi possível salvar a ideia. Tente novamente.",
      //   variant: "destructive",
      // })
    }
    setIsSaving(false)
  }

  // Function to handle feedback
  const handleFeedback = (type: "like" | "dislike") => {
    setFeedback(type)
    // toast({
    //   title: type === "like" ? "Thanks for the positive feedback!" : "Thanks for your feedback!",
    //   description: type === "like" ? "We're glad you liked the content." : "We'll work to improve our results.",
    // })
  }

  // Function to download content as text file
  const handleDownload = () => {
    const element = document.createElement("a")
    const file = new Blob([message.content], { type: "text/plain" })
    element.href = URL.createObjectURL(file)
    element.download = `virallyzer-content-${new Date().toISOString().slice(0, 10)}.txt`
    document.body.appendChild(element)
    element.click()
    document.body.removeChild(element)

    // toast({
    //   title: "Download started!",
    //   description: "Your content has been downloaded as a text file.",
    // })
  }

  // Function to share content (would be expanded in a real implementation)
  const handleShare = () => {
    if (navigator.share) {
      navigator
        .share({
          title: "Content generated by Virallyzer.ai",
          text: message.content,
        })
        .catch((error) => console.log("Erro ao compartilhar", error))
    } else {
      // toast({
      //   title: "Sharing not supported",
      //   description: "Your browser doesn\'t support the Share API.",
      // })
    }
  }

  // Detect if the message contains content that looks like a social media post
  const isSocialMediaContent =
    !isUser &&
    (message.content.includes("#") ||
      message.content.includes("Legenda:") ||
      message.content.includes("Post:") ||
      message.content.includes("Caption:"))

  return (
    <div className={`mb-4 flex ${isUser ? "justify-end" : "justify-start"}`}>
      <div
        className={`rounded-lg p-4 max-w-[85%] relative group ${
          isUser
            ? "bg-blue-500 text-white"
            : isSocialMediaContent
              ? "bg-white border border-gray-200 shadow-sm text-gray-800"
              : "bg-gray-100 text-gray-800"
        }`}
      >
        {message.image && (
          <div className="mb-3">
            <Image
              src={message.image || "/placeholder.svg"}
              alt="Uploaded image"
              width={300}
              height={200}
              className="rounded-md max-w-full object-contain"
            />
          </div>
        )}

        {isUser ? (
          <p>{message.content}</p>
        ) : (
          <div className="markdown-body">
            <ReactMarkdown
              remarkPlugins={[remarkGfm]}
              components={{
                a: ({ node, ...props }) => (
                  <a
                    {...props}
                    target="_blank"
                    rel="noopener noreferrer"
                    className={`underline ${isUser ? "text-blue-100" : "text-blue-600"}`}
                  />
                ),
                p: ({ node, ...props }) => <p {...props} className="mb-3" />,
                ul: ({ node, ...props }) => <ul {...props} className="list-disc pl-5 mb-3" />,
                ol: ({ node, ...props }) => <ol {...props} className="list-decimal pl-5 mb-3" />,
                li: ({ node, ...props }) => <li {...props} className="mb-1" />,
                h1: ({ node, ...props }) => <h1 {...props} className="text-xl font-bold mb-3" />,
                h2: ({ node, ...props }) => <h2 {...props} className="text-lg font-bold mb-2" />,
                h3: ({ node, ...props }) => <h3 {...props} className="text-md font-bold mb-2" />,
                code: ({ node, inline, ...props }) =>
                  inline ? (
                    <code {...props} className={`px-1 py-0.5 rounded ${isUser ? "bg-blue-400" : "bg-gray-200"}`} />
                  ) : (
                    <code {...props} className={`block p-2 rounded my-3 ${isUser ? "bg-blue-400" : "bg-gray-200"}`} />
                  ),
                pre: ({ node, ...props }) => (
                  <pre {...props} className="overflow-auto p-3 rounded my-3 bg-gray-800 text-white" />
                ),
                blockquote: ({ node, ...props }) => (
                  <blockquote
                    {...props}
                    className={`border-l-4 pl-4 italic my-3 ${isUser ? "border-blue-300" : "border-gray-400"}`}
                  />
                ),
                hr: ({ node, ...props }) => <hr {...props} className="my-4 border-t" />,
                img: ({ node, ...props }) => (
                  <img {...props} className="max-w-full rounded my-3" alt={props.alt || "Image"} />
                ),
              }}
            >
              {message.content}
            </ReactMarkdown>
          </div>
        )}

        <p className={`text-xs mt-2 ${isUser ? "text-blue-100" : "text-gray-500"}`}>{formattedTime}</p>

        {/* Action buttons for bot messages only */}
        {!isUser && (
          <div className="flex justify-end mt-3 space-x-1">
            {/* Feedback buttons */}
            <Button
              size="sm"
              variant="ghost"
              className={`h-8 w-8 rounded-full ${feedback === "like" ? "bg-green-100 text-green-600" : "text-gray-400 hover:text-gray-600"}`}
              onClick={() => handleFeedback("like")}
            >
              <ThumbsUp className="h-4 w-4" />
              <span className="sr-only">Like</span>
            </Button>

            <Button
              size="sm"
              variant="ghost"
              className={`h-8 w-8 rounded-full ${feedback === "dislike" ? "bg-red-100 text-red-600" : "text-gray-400 hover:text-gray-600"}`}
              onClick={() => handleFeedback("dislike")}
            >
              <ThumbsDown className="h-4 w-4" />
              <span className="sr-only">Dislike</span>
            </Button>

            {/* Copy button */}
            <Button
              size="sm"
              variant="ghost"
              className="h-8 w-8 rounded-full text-gray-400 hover:text-gray-600"
              onClick={handleCopy}
            >
              {isCopied ? <Check className="h-4 w-4 text-green-600" /> : <Copy className="h-4 w-4" />}
              <span className="sr-only">Copy</span>
            </Button>

            {/* Save to ideas button */}
            <Button
              size="sm"
              variant="ghost"
              className="h-8 w-8 rounded-full text-gray-400 hover:text-gray-600 disabled:opacity-50"
              onClick={handleSaveToIdeas}
              disabled={isSaving || isSuccessfullySaved}
            >
              {isSuccessfullySaved ? (
                <BookmarkCheck className="h-4 w-4 text-blue-600" />
              ) : isSaving ? (
                <div className="h-4 w-4 animate-spin rounded-full border-2 border-gray-400 border-t-transparent"></div>
              ) : (
                <BookmarkPlus className="h-4 w-4" />
              )}
              <span className="sr-only">Save</span>
            </Button>

            {/* More options dropdown */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button size="sm" variant="ghost" className="h-8 w-8 rounded-full text-gray-400 hover:text-gray-600">
                  <MoreHorizontal className="h-4 w-4" />
                  <span className="sr-only">More options</span>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <DropdownMenuItem onClick={handleDownload} className="cursor-pointer">
                  <Download className="h-4 w-4 mr-2" />
                  <span>Download</span>
                </DropdownMenuItem>
                <DropdownMenuItem onClick={handleShare} className="cursor-pointer">
                  <Share2 className="h-4 w-4 mr-2" />
                  <span>Share</span>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        )}
      </div>
    </div>
  )
}
