"use client"

import Image from "next/image"
import { formatDistanceToNow } from "date-fns"
import { enUS } from "date-fns/locale"
import ReactMarkdown from "react-markdown"
import remarkGfm from "remark-gfm"
import type { Message } from "@/lib/types"
import { useState } from "react"
// import { toast } from "@/components/ui/use-toast"
import {
  BookmarkPlus,
  BookmarkCheck,
  Copy,
  Check,
  Share2,
  Download,
  MoreHorizontal,
} from "lucide-react"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { Button } from "@/components/ui/button"
import { useIdeas, type NewIdea } from "@/hooks/useIdeas"

interface MessageBubbleProps {
  message: Message
  userId: string
}

export default function MessageBubble({ message, userId }: MessageBubbleProps) {
  const isUser = message.sender === "user"
  const formattedTime = formatDistanceToNow(new Date(message.timestamp), {
    addSuffix: true,
    locale: enUS,
  })

  const { createIdea } = useIdeas(userId)

  const [isCopied, setIsCopied] = useState(false)
  const [isSaving, setIsSaving] = useState(false)
  const [isSuccessfullySaved, setIsSuccessfullySaved] = useState(false)

  // Function to copy message text
  const handleCopy = () => {
    navigator.clipboard.writeText(message.content || "")
    setIsCopied(true)
    // toast({
    //   title: "Copied!",
    //   description: "Text copied to clipboard",
    // })
    setTimeout(() => setIsCopied(false), 2000)
  }

  // Function to save message as an idea
  const handleSaveToIdeas = async () => {
    if (isSaving || isSuccessfullySaved) return

    setIsSaving(true)

    const idea = {
      title: message.content.substring(0, 50) + "...",
      description: message.content || "",
      tags: [],
      status: "draft",
      category: null,
    }

    const result = await createIdea(idea)

    if (result.success) {
      setIsSuccessfullySaved(true)
      // toast({
      //   title: "Salvo no Ideas Bank!",
      //   description: "Sua nova ideia foi registrada com sucesso.",
      // })
    } else {
      // toast({
      //   title: "Erro ao Salvar",
      //   description: result.error?.message || "Não foi possível salvar a ideia. Tente novamente.",
      //   variant: "destructive",
      // })
    }
    setIsSaving(false)
  }

  // Function to download content as text file
  const handleDownload = () => {
    const element = document.createElement("a")
    const file = new Blob([message.content], { type: "text/plain" })
    element.href = URL.createObjectURL(file)
    element.download = `virallyzer-content-${new Date().toISOString().slice(0, 10)}.txt`
    document.body.appendChild(element)
    element.click()
    document.body.removeChild(element)

    // toast({
    //   title: "Download started!",
    //   description: "Your content has been downloaded as a text file.",
    // })
  }

  // Function to share content (would be expanded in a real implementation)
  const handleShare = () => {
    if (navigator.share) {
      navigator
        .share({
          title: "Content generated by Virallyzer.ai",
          text: message.content,
        })
        .catch((error) => console.log("Erro ao compartilhar", error))
    } else {
      // toast({
      //   title: "Sharing not supported",
      //   description: "Your browser doesn\'t support the Share API.",
      // })
    }
  }

  // Detect if the message contains content that looks like a social media post
  const isSocialMediaContent =
    !isUser &&
    (message.content.includes("#") ||
      message.content.includes("Legenda:") ||
      message.content.includes("Post:") ||
      message.content.includes("Caption:"))

  return (
    <div className={`mb-6 flex ${isUser ? "justify-end" : "justify-start"}`}>
      <div
        className={`rounded-2xl p-5 max-w-[85%] relative group transition-all duration-300 hover:shadow-xl ${
          isUser
            ? "bg-gradient-to-br from-cyan-500 via-purple-500 to-pink-500 text-white shadow-lg shadow-cyan-500/30"
            : "bg-white text-gray-900 shadow-lg shadow-gray-500/20 border border-gray-200 hover:shadow-gray-500/30"
        }`}
      >
        {message.image && (
          <div className="mb-4">
            <Image
              src={message.image || "/placeholder.svg"}
              alt="Uploaded image"
              width={300}
              height={200}
              className="rounded-xl max-w-full object-contain shadow-lg border border-cyan-400/30"
            />
          </div>
        )}

        {message.audioUrl && message.audioType && (
          <div className="mb-3">
            <audio controls className="w-full max-w-xs rounded-lg bg-gray-800">
              <source src={message.audioUrl} type={message.audioType} />
              Your browser does not support the audio element.
            </audio>
          </div>
        )}

        {isUser ? (
          <p className="leading-relaxed">{message.content}</p>
        ) : (
          <div className="markdown-body prose prose-sm max-w-none text-gray-900">
            <ReactMarkdown
              remarkPlugins={[remarkGfm]}
              components={{
                a: ({ node, ...props }) => (
                  <a
                    {...props}
                    target="_blank"
                    rel="noopener noreferrer"
                    className={`underline transition-colors ${isUser ? "text-cyan-200 hover:text-white" : "text-blue-600 hover:text-blue-800"}`}
                  />
                ),
                p: ({ node, ...props }) => <p {...props} className="mb-3 leading-relaxed text-gray-900" />,
                ul: ({ node, ...props }) => <ul {...props} className="list-disc pl-5 mb-3 text-gray-900" />,
                ol: ({ node, ...props }) => <ol {...props} className="list-decimal pl-5 mb-3 text-gray-900" />,
                li: ({ node, ...props }) => <li {...props} className="mb-1 text-gray-900" />,
                h1: ({ node, ...props }) => <h1 {...props} className="text-xl font-bold mb-3 text-gray-900" />,
                h2: ({ node, ...props }) => <h2 {...props} className="text-lg font-bold mb-2 text-gray-900" />,
                h3: ({ node, ...props }) => <h3 {...props} className="text-md font-bold mb-2 text-gray-900" />,
                code: ({ node, inline, className, children, ...props }: any) =>
                  inline ? (
                    <code {...props} className={`px-2 py-1 rounded-md text-sm ${isUser ? "bg-cyan-400/30 text-cyan-100" : "bg-gray-100 text-gray-800"}`}>
                      {children}
                    </code>
                  ) : (
                    <code {...props} className={`block p-3 rounded-lg my-3 text-sm ${isUser ? "bg-cyan-400/30 text-cyan-100" : "bg-gray-100 text-gray-800 border border-gray-200"}`}>
                      {children}
                    </code>
                  ),
                pre: ({ node, ...props }) => (
                  <pre {...props} className="overflow-auto p-4 rounded-lg my-3 bg-gray-100 text-gray-800 border border-gray-200" />
                ),
                blockquote: ({ node, ...props }) => (
                  <blockquote
                    {...props}
                    className={`border-l-4 pl-4 italic my-3 ${isUser ? "border-cyan-300 text-cyan-100" : "border-gray-400 text-gray-700"}`}
                  />
                ),
                hr: ({ node, ...props }) => <hr {...props} className="my-4 border-t border-gray-300" />,
                img: ({ node, ...props }) => (
                  <img {...props} className="max-w-full rounded-lg my-3 border border-gray-200" alt={props.alt || "Image"} />
                ),
              }}
            >
              {message.content}
            </ReactMarkdown>
          </div>
        )}

        <div className="flex items-center justify-between mt-4">
          <p className={`text-xs ${isUser ? "text-cyan-200" : "text-gray-500"}`}>{formattedTime}</p>
          
          {/* Action buttons for bot messages only */}
          {!isUser && (
            <div className="flex items-center space-x-2">
              {/* Copy button */}
              <Button
                size="sm"
                variant="ghost"
                className="h-9 w-9 rounded-full text-cyan-300 hover:text-cyan-200 hover:bg-gradient-to-r hover:from-cyan-500/20 hover:to-purple-500/20 transition-all duration-300 border border-cyan-400/30 hover:border-cyan-400/50 shadow-lg shadow-cyan-500/20"
                onClick={handleCopy}
                title="Copy content"
              >
                {isCopied ? <Check className="h-5 w-5 text-green-400" /> : <Copy className="h-5 w-5" />}
                <span className="sr-only">Copy</span>
              </Button>

              {/* Save to ideas button */}
              <Button
                size="sm"
                variant="ghost"
                className="h-9 w-9 rounded-full text-purple-300 hover:text-purple-200 hover:bg-gradient-to-r hover:from-purple-500/20 hover:to-pink-500/20 disabled:opacity-50 transition-all duration-300 border border-purple-400/30 hover:border-purple-400/50 shadow-lg shadow-purple-500/20"
                onClick={handleSaveToIdeas}
                disabled={isSaving || isSuccessfullySaved}
                title="Save to ideas"
              >
                {isSuccessfullySaved ? (
                  <BookmarkCheck className="h-5 w-5 text-purple-400" />
                ) : isSaving ? (
                  <div className="h-5 w-5 animate-spin rounded-full border-2 border-purple-400 border-t-transparent"></div>
                ) : (
                  <BookmarkPlus className="h-5 w-5" />
                )}
                <span className="sr-only">Save</span>
              </Button>

              {/* Share button */}
              <Button
                size="sm"
                variant="ghost"
                className="h-9 w-9 rounded-full text-green-300 hover:text-green-200 hover:bg-gradient-to-r hover:from-green-500/20 hover:to-emerald-500/20 transition-all duration-300 border border-green-400/30 hover:border-green-400/50 shadow-lg shadow-green-500/20"
                onClick={handleShare}
                title="Compartilhar"
              >
                <Share2 className="h-5 w-5" />
                <span className="sr-only">Share</span>
              </Button>

              {/* More options dropdown */}
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button size="sm" variant="ghost" className="h-9 w-9 rounded-full text-gray-300 hover:text-gray-200 hover:bg-gradient-to-r hover:from-gray-500/20 hover:to-slate-500/20 transition-all duration-300 border border-gray-400/30 hover:border-gray-400/50 shadow-lg shadow-gray-500/20" title="Mais opções">
                    <MoreHorizontal className="h-5 w-5" />
                    <span className="sr-only">More options</span>
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-40 bg-gradient-to-br from-gray-900 via-purple-900 to-indigo-900 border border-cyan-400/30 shadow-xl shadow-cyan-500/20">
                  <DropdownMenuItem onClick={handleDownload} className="cursor-pointer text-cyan-300 hover:text-cyan-200 hover:bg-gradient-to-r hover:from-cyan-500/20 hover:to-purple-500/20 transition-all duration-300">
                    <Download className="h-4 w-4 mr-2" />
                    <span>Download</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}
